{"ast":null,"code":"import { putTask } from '../api/api';\nconst POST_INA_STASH = \"POST_INA_STASH\";\nlet initialState = {\n  newTask: []\n};\n\nconst taskReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case POST_USER_TASK:\n      let task = {\n        name: action.name,\n        descValue: action.desctiption,\n        checkbo: action.checkPay,\n        sity: action.sity,\n        phone: action.phone,\n        id: action._id\n      };\n      return { ...state,\n        newTask: [...state.newTask, task]\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst setUserTask = (name, desctiption, checkPay, sity, phone, _id) => {\n  return {\n    type: POST_USER_TASK,\n    name,\n    desctiption,\n    checkPay,\n    sity,\n    phone,\n    _id\n  };\n};\n\nconst setFullTask = data => {\n  return {\n    type: POST_USER_TASK,\n    data\n  };\n};\n\nexport const createTask = (name, descValue, checkbo, sity, phone) => {\n  return async dispatch => {\n    let data = await putTask.createNewTask(name, descValue, checkbo, sity, phone);\n    console.log(data);\n    dispatch(setUserTask(data.name, data.desctiption, data.checkPay, data.sity, data.phoneClient, data._id));\n  };\n};\nexport const appointAnExecutor = (nameExecutor, surnameExecutor, phoneExecutor, executionTime, commentExecutor, id) => {\n  return async dispatch => {\n    let data = await putTask.putTaskForMake(nameExecutor, surnameExecutor, phoneExecutor, executionTime, commentExecutor, id);\n    console.log(data);\n    dispatch(setFullTask(data));\n  };\n};\nexport default taskReducer;","map":{"version":3,"sources":["D:/helper/help-app/src/redux/task_reducer.js"],"names":["putTask","POST_INA_STASH","initialState","newTask","taskReducer","state","action","type","POST_USER_TASK","task","name","descValue","desctiption","checkbo","checkPay","sity","phone","id","_id","setUserTask","setFullTask","data","createTask","dispatch","createNewTask","console","log","phoneClient","appointAnExecutor","nameExecutor","surnameExecutor","phoneExecutor","executionTime","commentExecutor","putTaskForMake"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AACA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAC;AADS,CAAnB;;AAGA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAMC,cAAN;AACI,UAAIC,IAAI,GAAG;AACTC,QAAAA,IAAI,EAAEJ,MAAM,CAACI,IADJ;AAETC,QAAAA,SAAS,EAAEL,MAAM,CAACM,WAFT;AAGTC,QAAAA,OAAO,EAAEP,MAAM,CAACQ,QAHP;AAITC,QAAAA,IAAI,EAAET,MAAM,CAACS,IAJJ;AAKTC,QAAAA,KAAK,EAAEV,MAAM,CAACU,KALL;AAMTC,QAAAA,EAAE,EAAEX,MAAM,CAACY;AANF,OAAX;AASJ,aAAO,EACN,GAAGb,KADG;AAEDF,QAAAA,OAAO,EAAE,CAAC,GAAGE,KAAK,CAACF,OAAV,EAAmBM,IAAnB;AAFR,OAAP;;AAIM;AACF,aAAOJ,KAAP;AAhBN;AAkBH,CAnBD;;AAuBC,MAAMc,WAAW,GAAG,CAACT,IAAD,EAAOE,WAAP,EAAoBE,QAApB,EAA8BC,IAA9B,EAAoCC,KAApC,EAA2CE,GAA3C,KAAmD;AAErE,SAAO;AACLX,IAAAA,IAAI,EAAEC,cADD;AAELE,IAAAA,IAFK;AAGLE,IAAAA,WAHK;AAILE,IAAAA,QAJK;AAKLC,IAAAA,IALK;AAMLC,IAAAA,KANK;AAOLE,IAAAA;AAPK,GAAP;AASD,CAXD;;AAaA,MAAME,WAAW,GAAIC,IAAD,IAAU;AAE7B,SAAO;AACLd,IAAAA,IAAI,EAAEC,cADD;AAELa,IAAAA;AAFK,GAAP;AAID,CANA;;AAUD,OAAO,MAAMC,UAAU,GAAG,CAACZ,IAAD,EAAOC,SAAP,EAAkBE,OAAlB,EAA2BE,IAA3B,EAAiCC,KAAjC,KAA2C;AACnE,SAAQ,MAAOO,QAAP,IAAoB;AAC3B,QAAIF,IAAI,GAAG,MAAMrB,OAAO,CAACwB,aAAR,CAAsBd,IAAtB,EAA4BC,SAA5B,EAAuCE,OAAvC,EAAgDE,IAAhD,EAAsDC,KAAtD,CAAjB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACAE,IAAAA,QAAQ,CAACJ,WAAW,CAACE,IAAI,CAACX,IAAN,EAAYW,IAAI,CAACT,WAAjB,EAA8BS,IAAI,CAACP,QAAnC,EAA6CO,IAAI,CAACN,IAAlD,EAAwDM,IAAI,CAACM,WAA7D,EAA0EN,IAAI,CAACH,GAA/E,CAAZ,CAAR;AACA,GAJD;AAKD,CANM;AASP,OAAO,MAAMU,iBAAiB,GAAG,CAACC,YAAD,EAAeC,eAAf,EAAgCC,aAAhC,EAA+CC,aAA/C,EAA8DC,eAA9D,EAA+EhB,EAA/E,KAAsF;AACrH,SAAQ,MAAOM,QAAP,IAAoB;AAC3B,QAAIF,IAAI,GAAG,MAAMrB,OAAO,CAACkC,cAAR,CAAuBL,YAAvB,EAAqCC,eAArC,EAAsDC,aAAtD,EAAqEC,aAArE,EAAoFC,eAApF,EAAqGhB,EAArG,CAAjB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACAE,IAAAA,QAAQ,CAACH,WAAW,CAACC,IAAD,CAAZ,CAAR;AACA,GAJD;AAKD,CANM;AAQP,eAAejB,WAAf","sourcesContent":["import {putTask} from '../api/api'\r\nconst POST_INA_STASH = \"POST_INA_STASH\"; \r\nlet initialState = {\r\n  newTask:[]\r\n};\r\nconst taskReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case  POST_USER_TASK: \r\n          let task = {\r\n            name: action.name,\r\n            descValue: action.desctiption,\r\n            checkbo: action.checkPay,\r\n            sity: action.sity,\r\n            phone: action.phone,\r\n            id: action._id\r\n          } \r\n\r\n      return {\r\n       ...state,\r\n            newTask: [...state.newTask, task],\r\n      }\r\n            default:\r\n          return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n const setUserTask = (name, desctiption, checkPay, sity, phone, _id) => {\r\n   \r\n   return {\r\n     type: POST_USER_TASK,\r\n     name,\r\n     desctiption,\r\n     checkPay,\r\n     sity,\r\n     phone,\r\n     _id\r\n   }\r\n }\r\n\r\n const setFullTask = (data) => {\r\n   \r\n  return {\r\n    type: POST_USER_TASK,\r\n    data\r\n  }\r\n}\r\n\r\n\r\n\r\nexport const createTask = (name, descValue, checkbo, sity, phone) => {\r\n  return  async (dispatch) => {\r\n   let data = await putTask.createNewTask(name, descValue, checkbo, sity, phone );\r\n   console.log(data); \r\n   dispatch(setUserTask(data.name, data.desctiption, data.checkPay, data.sity, data.phoneClient, data._id));\r\n  }\r\n}\r\n\r\n\r\nexport const appointAnExecutor = (nameExecutor, surnameExecutor, phoneExecutor, executionTime, commentExecutor, id) => {\r\n  return  async (dispatch) => {\r\n   let data = await putTask.putTaskForMake(nameExecutor, surnameExecutor, phoneExecutor, executionTime, commentExecutor, id );\r\n   console.log(data); \r\n   dispatch(setFullTask(data));\r\n  }\r\n}\r\n\r\nexport default taskReducer;"]},"metadata":{},"sourceType":"module"}