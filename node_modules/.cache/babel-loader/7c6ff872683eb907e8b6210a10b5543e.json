{"ast":null,"code":"import { putTask } from '../api/api';\nconst POST_USER_TASK = \"POST_USER_TASK\";\nconst POST_INA_STASH = 'POST_INA_STASH';\nconst GET_MY_LIST_TASK = 'GET_MY_LIST_TASK';\nconst GET_MY_LIST_ID = 'GET_MY_LIST_ID';\nlet initialState = {\n  newTask: [],\n  myTask: [],\n  myListTask: []\n};\n\nconst taskReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case POST_INA_STASH:\n      let gotTask = {\n        _id: action.data._id,\n        name: action.data.name,\n        surname: action.data.surname,\n        nameExecutor: action.data.nameExecutor,\n        phoneClient: action.data.phoneClient,\n        phoneExecutor: action.data.phoneExecutor,\n        checkPay: action.data.checkPay,\n        sity: action.data.sity,\n        desctiption: action.data.desctiption,\n        checkwillingness: action.data.checkwillingness,\n        commentExecutor: action.data.commentExecutor,\n        executionTime: action.data.executionTime,\n        surnameExecutor: action.data.surnameExecutor\n      };\n      let isTake = true;\n      return { ...state,\n        myTask: [...state.myTask, gotTask],\n        isTake: true\n      };\n\n    case GET_MY_LIST_TASK:\n      let evenTask = {\n        _id: action.data._id,\n        name: action.data.name,\n        surname: action.data.surname,\n        nameExecutor: action.data.nameExecutor,\n        phoneClient: action.data.phoneClient,\n        phoneExecutor: action.data.phoneExecutor,\n        checkPay: action.data.checkPay,\n        sity: action.data.sity,\n        desctiption: action.data.desctiption,\n        checkwillingness: action.data.checkwillingness,\n        commentExecutor: action.data.commentExecutor,\n        executionTime: action.data.executionTime,\n        surnameExecutor: action.data.surnameExecutor\n      };\n      return { ...state,\n        myListTask: [...state.myListTask, evenTask]\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst setFullTask = data => {\n  return {\n    type: POST_INA_STASH,\n    data\n  };\n};\n\nconst getmyTaskList = data => {\n  return {\n    type: GET_MY_LIST_TASK,\n    data\n  };\n};\n\nconst getMyListId = name => {\n  return {\n    type: GET_MY_LIST_ID,\n    name\n  };\n};\n\nexport const createTask = (name, descValue, checkbo, sity, phone) => {\n  return async dispatch => {\n    let data = await putTask.createNewTask(name, descValue, checkbo, sity, phone);\n    dispatch(getMyListId(data.name));\n    console.log(data);\n  };\n};\nexport const getMyListTask = name => {\n  return async dispatch => {\n    console.log(name);\n    let data = await putTask.getMyListTask(name);\n    dispatch(getmyTaskList(data));\n    console.log(data);\n  };\n};\nexport const appointAnExecutor = (nameExecutor, surnameExecutor, phoneExecutor, executionTime, commentExecutor, id) => {\n  return async dispatch => {\n    let data = await putTask.putTaskForMake(nameExecutor, surnameExecutor, phoneExecutor, executionTime, commentExecutor, id);\n    console.log(data);\n    const chooseTaskExecutor = JSON.stringify(data.value);\n    localStorage.setItem('chooseTask', chooseTaskExecutor);\n    console.log(chooseTaskExecutor);\n    dispatch(setFullTask(data.value));\n  };\n};\nexport default taskReducer;","map":{"version":3,"sources":["D:/helper/help-app/src/redux/task_reducer.js"],"names":["putTask","POST_USER_TASK","POST_INA_STASH","GET_MY_LIST_TASK","GET_MY_LIST_ID","initialState","newTask","myTask","myListTask","taskReducer","state","action","type","gotTask","_id","data","name","surname","nameExecutor","phoneClient","phoneExecutor","checkPay","sity","desctiption","checkwillingness","commentExecutor","executionTime","surnameExecutor","isTake","evenTask","setFullTask","getmyTaskList","getMyListId","createTask","descValue","checkbo","phone","dispatch","createNewTask","console","log","getMyListTask","appointAnExecutor","id","putTaskForMake","chooseTaskExecutor","JSON","stringify","value","localStorage","setItem"],"mappings":"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","sourcesContent":["import {putTask} from '../api/api';\r\nconst POST_USER_TASK = \"POST_USER_TASK\"; \r\nconst POST_INA_STASH = 'POST_INA_STASH';\r\nconst GET_MY_LIST_TASK = 'GET_MY_LIST_TASK';\r\nconst GET_MY_LIST_ID = 'GET_MY_LIST_ID';\r\nlet initialState = {\r\n  newTask:[],\r\n  myTask:[],\r\n  myListTask:[]\r\n};\r\nconst taskReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n       case  POST_INA_STASH:        \r\n          let gotTask = {\r\n            _id: action.data._id,\r\n            name: action.data.name,\r\n            surname: action.data.surname,\r\n            nameExecutor: action.data.nameExecutor,\r\n            phoneClient: action.data.phoneClient,\r\n            phoneExecutor: action.data.phoneExecutor,\r\n            checkPay: action.data.checkPay,\r\n            sity: action.data.sity,\r\n            desctiption: action.data.desctiption,\r\n            checkwillingness: action.data.checkwillingness,\r\n            commentExecutor: action.data.commentExecutor,\r\n            executionTime: action.data.executionTime,\r\n            surnameExecutor: action.data.surnameExecutor\r\n          } \r\n          let isTake = true;\r\n\r\n      return {\r\n       ...state,\r\n       myTask: [...state.myTask,  gotTask],\r\n       isTake:true\r\n      }\r\n      case GET_MY_LIST_TASK:\r\n        let evenTask = {\r\n          _id: action.data._id,\r\n          name: action.data.name,\r\n          surname: action.data.surname,\r\n          nameExecutor: action.data.nameExecutor,\r\n          phoneClient: action.data.phoneClient,\r\n          phoneExecutor: action.data.phoneExecutor,\r\n          checkPay: action.data.checkPay,\r\n          sity: action.data.sity,\r\n          desctiption: action.data.desctiption,\r\n          checkwillingness: action.data.checkwillingness,\r\n          commentExecutor: action.data.commentExecutor,\r\n          executionTime: action.data.executionTime,\r\n          surnameExecutor: action.data.surnameExecutor\r\n        } \r\n        return {\r\n          ...state,\r\n          myListTask:  [...state.myListTask,  evenTask]\r\n        }\r\n            default:\r\n          return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n \r\n\r\n const setFullTask = (data) => {  \r\n  return {\r\n    type: POST_INA_STASH,\r\n    data\r\n  }\r\n}\r\nconst getmyTaskList = (data) => {  \r\n  return {\r\n    type: GET_MY_LIST_TASK,\r\n    data\r\n  }\r\n}\r\n\r\n\r\nconst getMyListId = (name) => {\r\n  return {\r\n    type: GET_MY_LIST_ID,\r\n    name\r\n  }\r\n}\r\n\r\nexport const createTask = (name, descValue, checkbo, sity, phone) => {\r\n  return  async (dispatch) => {\r\n   let data = await putTask.createNewTask(name, descValue, checkbo, sity, phone );\r\n   dispatch(getMyListId(data.name));\r\n   console.log(data); \r\n   \r\n  }\r\n}\r\n\r\nexport const getMyListTask = (name) => {\r\n  return  async (dispatch) => {\r\n    console.log(name);\r\n    \r\n   let data = await putTask.getMyListTask(name);\r\n    dispatch(getmyTaskList(data))\r\n   console.log(data);  \r\n\r\n  }\r\n}\r\nexport const appointAnExecutor = (nameExecutor, surnameExecutor, phoneExecutor, executionTime, commentExecutor, id) => {\r\n  return  async (dispatch) => {\r\n   let data = await putTask.putTaskForMake(nameExecutor, surnameExecutor, phoneExecutor, executionTime, commentExecutor, id );\r\n   console.log(data); \r\n   const chooseTaskExecutor = JSON.stringify(data.value);\r\n   localStorage.setItem('chooseTask', chooseTaskExecutor);\r\n   console.log(chooseTaskExecutor);\r\n   dispatch(setFullTask(data.value));\r\n   \r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default taskReducer;"]},"metadata":{},"sourceType":"module"}